@model IEnumerable<MusicStoreProject.Models.Album>


@helper Truncate(string input, int length)
{
    if (input.Length <= length)
    {
        @input
    }
    else
    {
        @input.Substring(0, length)<text>...</text>
    }
}



@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table>
    <tr>
        <th>
            Genre
        </th>
        <th>
            Artist
        </th>
        <th>
            Title
        </th>
        <th>
            Price
        </th>
@*        <th>*@
@*            AlbumArtUrl *@
@*        </th>*@
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Genre.Name)
        </td>
        <td>
@*            @Html.DisplayFor(modelItem => item.Artist.Name)*@
        @Truncate(item.Artist.Name,20)
@*        调用上面自定义的Truncate函数,完成截断文本内容功能*@
        </td>
        <td>
@*            @Html.DisplayFor(modelItem => item.Title)*@
        @Truncate(item.Title,20)
        @*        调用上面自定义的Truncate函数,完成截断文本内容功能*@
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Price)
        </td>
@*        <td>*@
@*            @Html.DisplayFor(modelItem => item.AlbumArtUrl)*@
@*        </td>*@
@*        不显示AlbumArtUrl在Index页面上*@
        
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.AlbumId }) |
            @Html.ActionLink("Details", "Details", new { id=item.AlbumId }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.AlbumId })
        </td>
    </tr>
}

</table>
